#include <stdlib.h>
#include <stdio.h>

char *ft_strncpy(char *s1, char *s2, int n)
{
	int i = 0;

	while (i < n && s2[i])
	{
		s1[i] = s2[i];
		i++;
	}
	s1[i] = '\0';  // Ensure the string is null-terminated
	return (s1);
}

char **ft_split(char *str)
{
	int i = 0;
	int j = 0;
	int k = 0;
	int wc = 0;

	// Count the number of words
	while (str[i])
	{
		// Skip any whitespace characters
		while (str[i] && (str[i] == ' ' || str[i] == '\t' || str[i] == '\n'))
			i++;
		if (str[i])
			wc++;  // Found a word
		// Move past the word
		while (str[i] && (str[i] != ' ' && str[i] != '\t' && str[i] != '\n'))
			i++;
	}

	// Allocate memory for the array of words (plus 1 for NULL terminator)
	char **out = (char **)malloc(sizeof(char *) * (wc + 1));
	if (!out)  // Check if malloc was successful
		return NULL;

	i = 0;
	// Split the string into words
	while (str[i])
	{
		// Skip leading whitespace
		while (str[i] && (str[i] == ' ' || str[i] == '\t' || str[i] == '\n'))
			i++;
		j = i;  // Mark the start of the word
		// Move to the end of the word
		while (str[i] && (str[i] != ' ' && str[i] != '\t' && str[i] != '\n'))
			i++;
		if (i > j)  // If we found a word
		{
			// Allocate memory for the word (plus 1 for null terminator)
			out[k] = (char *)malloc(sizeof(char) * ((i - j) + 1));
			if (!out[k])  // Check if malloc was successful
			{
				// Free any previously allocated memory
				for (int x = 0; x < k; x++)
					free(out[x]);
				free(out);
				return NULL;
			}
			// Copy the word into the allocated memory
			ft_strncpy(out[k++], &str[j], i - j);
		}
	}
	out[k] = NULL;  // Null-terminate the array
	return out;
}



/*----------------main ----------------------------------*/

int main()
{
	char str[] = "Hello   world\nThis is\tan example.";
	char **split = ft_split(str);

	// Print the result
	for (int i = 0; split[i] != NULL; i++)
	{
		printf("Word %d: %s\n", i + 1, split[i]);
		free(split[i]);  // Free each word after use
	}

	free(split);  // Free the array itself
	return 0;
}
